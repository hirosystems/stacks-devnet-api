name: CI

on:
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '**/CHANGELOG.md'
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  format:
    name: Format check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: rustup toolchain install stable --profile minimal --component rustfmt

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.docker_meta.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Meta
        uses: docker/metadata-action@v5
        id: docker_meta
        with:
          images: |
            hirosystems/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create artifact directory
        run: mkdir -p /tmp/artifacts

      - name: Build/Save Image
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.docker_meta.outputs.tags }},
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/artifacts/myimage.tar

      - name: Save docker artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/artifacts/myimage.tar

  k8s-tests:
    runs-on: ubuntu-latest
    needs: build
    env:
      VERSION: ${{ needs.build.outputs.version }}

    steps:
      - name: Read version into env var
        run: |
          echo "Extracted version tag: ${VERSION}"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build k8s cluster
        uses: nolar/setup-k3d-k3s@v1
        with:
          version: v1.26
          k3d-name: k3d-kube
          k3d-args: "--no-lb --no-rollback --k3s-arg --disable=traefik,servicelb,metrics-server@server:*"

      - name: Pull docker image artifact from previous docker job
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: /tmp/artifacts

      - name: Load image
        run: |
          docker load --input /tmp/artifacts/myimage.tar
          docker tag hirosystems/stacks-devnet-api:${VERSION} hirosystems/stacks-devnet-api:ci
          docker image ls -a

      - name: Deploy k8s manifests
        run: |
          k3d image import hirosystems/stacks-devnet-api:ci -c k3d-kube
          kubectl create namespace devnet
          kubectl create configmap stacks-devnet-api --from-file=./Config.toml --namespace devnet
          kubectl apply -f ./templates/ci/stacks-devnet-api.template.yaml
          echo "sleep for 30 sec"
          sleep 30

      - name: Sanity check on k8s resources deployed
        run: |
          kubectl get all --all-namespaces
          kubectl -n devnet get cm
          kubectl -n devnet describe po stacks-devnet-api
          kubectl -n devnet logs stacks-devnet-api

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: ~/.cargo/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install and run cargo-tarpaulin
        run: |
          cargo install cargo-tarpaulin
          cargo --version
          cargo tarpaulin --out lcov --features k8s_tests

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          codecov_yml_path: .github/codecov.yml

  build-publish-release:
    runs-on: ubuntu-latest
    needs:
      - build
      - k8s-tests
    outputs:
      docker_image_digest: ${{ steps.docker_push.outputs.digest }}
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          SEMANTIC_RELEASE_PACKAGE: ${{ github.event.repository.name }}
        with:
          semantic_version: 19
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
            conventional-changelog-conventionalcommits@6.1.0

      - name: Checkout tag
        if: steps.semantic.outputs.new_release_version != ''
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: v${{ steps.semantic.outputs.new_release_version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Meta
        uses: docker/metadata-action@v5
        id: docker_meta
        with:
          images: |
            hirosystems/${{ github.event.repository.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=${{ steps.semantic.outputs.new_release_version }},enable=${{ steps.semantic.outputs.new_release_version != '' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.semantic.outputs.new_release_version }},enable=${{ steps.semantic.outputs.new_release_version != '' }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build/Push Image
        uses: docker/build-push-action@v5
        id: docker_push
        with:
          context: .
          tags: ${{ steps.docker_meta.outputs.tags }},
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Only push if (there's a new release on main branch, or if building a non-main branch) and (Only run on non-PR events or only PRs that aren't from forks)
          push: ${{ (github.ref != 'refs/heads/main' || steps.semantic.outputs.new_release_version != '') && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs:
      - build-publish-release
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      DEPLOY_ENV: dev
    environment:
      name: Development
      url: https://platform.dev.hiro.so/
    steps:
      - name: Checkout actions repo
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ secrets.DEVOPS_ACTIONS_REPO }}

      - name: Deploy Stacks Devnet API
        uses: ./actions/deploy
        with:
          docker_image_tag_or_digest: ${{ needs.build-publish-release.outputs.docker_image_digest }}
          k8s_repo: k8s-platform
          k8s_branch: main
          file_pattern: manifests/api/stacks-devnet-api/${{ env.DEPLOY_ENV }}/base/kustomization.yaml
          gh_token: ${{ secrets.GH_TOKEN }}

  auto-approve-dev:
    runs-on: ubuntu-latest
    if: needs.build-publish-release.outputs.new_release_published == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    needs:
      - build-publish-release
    steps:
      - name: Approve pending deployment
        run: |
          sleep 5
          ENV_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/hirosystems/stacks-devnet-api/actions/runs/${{ github.run_id }}/pending_deployments" | jq -r '.[0].environment.id // empty')
          if [[ -n "${ENV_ID}" ]]; then
            curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/hirosystems/stacks-devnet-api/actions/runs/${{ github.run_id }}/pending_deployments" -d "{\"environment_ids\":[${ENV_ID}],\"state\":\"approved\",\"comment\":\"auto approve\"}"
          fi

  deploy-staging:
    runs-on: ubuntu-latest
    needs:
      - build-publish-release
      - deploy-dev
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      DEPLOY_ENV: stg
    environment:
      name: Staging
      url: https://platform.stg.hiro.so/
    steps:
      - name: Checkout actions repo
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ secrets.DEVOPS_ACTIONS_REPO }}

      - name: Deploy Stacks Devnet API
        uses: ./actions/deploy
        with:
          docker_image_tag_or_digest: ${{ needs.build-publish-release.outputs.docker_image_digest }}
          k8s_repo: k8s-platform
          k8s_branch: main
          file_pattern: manifests/api/stacks-devnet-api/${{ env.DEPLOY_ENV }}/base/kustomization.yaml
          gh_token: ${{ secrets.GH_TOKEN }}

  auto-approve-staging:
    runs-on: ubuntu-latest
    if: needs.build-publish-release.outputs.new_release_published == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    needs:
      - build-publish-release
      - deploy-dev
    steps:
      - name: Approve pending deployment
        run: |
          sleep 5
          ENV_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/hirosystems/stacks-devnet-api/actions/runs/${{ github.run_id }}/pending_deployments" | jq -r '.[0].environment.id // empty')
          if [[ -n "${ENV_ID}" ]]; then
            curl -s -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/hirosystems/stacks-devnet-api/actions/runs/${{ github.run_id }}/pending_deployments" -d "{\"environment_ids\":[${ENV_ID}],\"state\":\"approved\",\"comment\":\"auto approve\"}"
          fi

  deploy-prod:
    runs-on: ubuntu-latest
    if: needs.build-publish-release.outputs.new_release_published == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
    needs:
      - build-publish-release
      - deploy-staging
    env:
      DEPLOY_ENV: prd
    environment:
      name: Production
      url: https://platform.hiro.so/
    steps:
      - name: Checkout actions repo
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_TOKEN }}
          repository: ${{ secrets.DEVOPS_ACTIONS_REPO }}

      - name: Deploy Stacks Devnet API
        uses: ./actions/deploy
        with:
          docker_image_tag_or_digest: ${{ needs.build-publish-release.outputs.docker_image_digest }}
          k8s_repo: k8s-platform
          k8s_branch: main
          file_pattern: manifests/api/stacks-devnet-api/${{ env.DEPLOY_ENV }}/base/kustomization.yaml
          gh_token: ${{ secrets.GH_TOKEN }}
